// https://leetcode.com/problems/search-in-rotated-sorted-array

class Solution {
    public int search(int[] nums, int target) {

        int peak = peakIndex(nums);

        // array is not rotated
        if(peak == -1){
            return BinarySearch(nums, 0, nums.length - 1, target);
        }
        else if(nums[peak] == target){
            return peak;
        }
        else if(nums[0] <= target){
            return BinarySearch(nums, 0, peak - 1, target);
        }
        else{    
            return BinarySearch(nums, peak + 1, nums.length - 1, target);
        }
    }

    
    int peakIndex(int[] arr){

        int start = 0;
        int end = arr.length - 1;

        while(start <= end){
            int mid = start + (end - start)/2;

            if(mid < end && arr[mid] > arr[mid+1]){   
                return mid;
            }
            else if(mid > start && arr[mid] < arr[mid-1]){
                return mid - 1;
            }
            else if(arr[mid] <= arr[start]){
                end = mid - 1;
            }
            else {
                start = mid + 1;
            }
        }
        return -1;
    }

    int BinarySearch(int[] n, int low, int high, int target){
    
        while(high >= low){      
            int mid = low + (high - low)/2;

            if(n[mid] == target){   
                return mid;
            }
            else if(n[mid] < target){
                low = mid + 1;
            }
            else{
                high = mid - 1;
            }
        }
        return -1;
    }

}
